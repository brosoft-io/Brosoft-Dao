{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Brosoft DAO What is Brosoft DAO Brosoft DAO is a Java library that allows you to quickly connect your project to a database without the hassle of having to write all the DAO classes to translate between Java Beans and your database of choice. How Does it Work There are 3 requirements at minimum to use Brosoft DAO that are generally the same regardless of the database that you are using. Implement the DB Connection Initializer Annotate a Class to be the DAO for a Java Bean Annotate the fields of the Java Bean for use in the DAO <<<<<<< HEAD Database-Specific Documentation Mongo PostgreSQL SQLite DAO methods /** * Creates a new Record in the Database * @param t * @return * @throws ExecutionException */ boolean create(T t) throws ExecutionException /** * Reads all records that match the given set of key pairs * @param pairs * @return * @throws ExecutionException */ List<T> read(KeyPair... pairs) throws ExecutionException /** * Reads all records * @return * @throws ExecutionException */ List<T> readAll() throws ExecutionException /** * Replaces record matching key pairs with new record * @param t * @param pairs * @return * @throws ExecutionException */ boolean update(T t, KeyPair... pairs) throws ExecutionException /** * Deletes all records that match the given key pairs * @param pairs * @return * @throws ExecutionException */ boolean delete(KeyPair... pairs) throws ExecutionException ======= 7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"Home"},{"location":"#welcome-to-brosoft-dao","text":"","title":"Welcome to Brosoft DAO"},{"location":"#what-is-brosoft-dao","text":"Brosoft DAO is a Java library that allows you to quickly connect your project to a database without the hassle of having to write all the DAO classes to translate between Java Beans and your database of choice.","title":"What is Brosoft DAO"},{"location":"#how-does-it-work","text":"There are 3 requirements at minimum to use Brosoft DAO that are generally the same regardless of the database that you are using. Implement the DB Connection Initializer Annotate a Class to be the DAO for a Java Bean Annotate the fields of the Java Bean for use in the DAO <<<<<<< HEAD","title":"How Does it Work"},{"location":"#database-specific-documentation","text":"","title":"Database-Specific Documentation"},{"location":"#mongo","text":"","title":"Mongo"},{"location":"#postgresql","text":"","title":"PostgreSQL"},{"location":"#sqlite","text":"","title":"SQLite"},{"location":"#dao-methods","text":"/** * Creates a new Record in the Database * @param t * @return * @throws ExecutionException */ boolean create(T t) throws ExecutionException /** * Reads all records that match the given set of key pairs * @param pairs * @return * @throws ExecutionException */ List<T> read(KeyPair... pairs) throws ExecutionException /** * Reads all records * @return * @throws ExecutionException */ List<T> readAll() throws ExecutionException /** * Replaces record matching key pairs with new record * @param t * @param pairs * @return * @throws ExecutionException */ boolean update(T t, KeyPair... pairs) throws ExecutionException /** * Deletes all records that match the given key pairs * @param pairs * @return * @throws ExecutionException */ boolean delete(KeyPair... pairs) throws ExecutionException ======= 7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"DAO methods"},{"location":"mongo/","text":"<<<<<<< HEAD MongoDB Integration MongoDatabase Init Implementation The first thing that is needed is to setup the connection to your MongoDB server and your application. What you need to do is make a Java class that implements io.brosoft.dao.MongoInit public class MongoInitExample implements MongoInit { @Override public MongoDatabase initDatabase() { MongoClient client = new MongoClient(\"localhost\", 27017); return client.getDatabase(\"testDB\"); } } Marking your Java Beans for DAO Usage Next you should annotate your Java beans to be used by the DAO. If you do not supply a key for the field it will default to the Java field name. public class MongoBean { @MongoField(key = \"name\") private String title; @MongoField private String genre; @MongoField(key = \"release-year\") private int year; } Making a DAO Class This is extremely simple as all you need to do is simply annoatate both the MongoInit implementation, as well as the Java Bean that it is using. The DAO's param type will be the Type of the Java Bean @MongoCollection(bean = MongoBean.class, collection = \"testCollection\", mongoInitializer = MongoInitExample.class) public class MongoDaoExample extends MongoDao<MongoBean> { } Using the DAO Usage of the DAO is straight forward and simple. Instantiate using the deafult constructor and perform CRUD operations. public class MongoExample { public static void main(String[] args) throws ExecutionException { MongoDaoExample dao = new MongoDaoExample(); MongoBean bean1 = new MongoBean(); bean1.setTitle(\"akira\"); bean1.setGenre(\"drama/thriller\"); bean1.setYear(1988); MongoBean bean2 = new MongoBean(); bean2.setTitle(\"serial experiments lain\"); bean2.setGenre(\"sci-fi\"); bean2.setYear(1995); System.out.println(\"create \" + dao.create(bean1)); System.out.println(\"delete \" + dao.delete(new KeyPair(\"name\", bean1.getTitle()))); System.out.println(\"create \" + dao.create(bean1)); System.out.println(\"update \" + dao.update(bean2, new KeyPair(\"name\", bean1.getTitle()))); List<MongoBean> beans = dao.readAll(); for (MongoBean bean : beans) { System.out.println(String.format(\"name: %s, genre: %s, date: %s\", bean.getTitle(), bean.getGenre(), bean.getYear())); } System.out.println(\"delete \" + dao.delete(new KeyPair(\"name\", bean1.getTitle()))); System.out.println(\"delete \" + dao.delete(new KeyPair(\"name\", bean2.getTitle()))); } } ======= MongoDB Integration 7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"Mongo"},{"location":"mongo/#mongodb-integration","text":"","title":"MongoDB Integration"},{"location":"mongo/#mongodatabase-init-implementation","text":"The first thing that is needed is to setup the connection to your MongoDB server and your application. What you need to do is make a Java class that implements io.brosoft.dao.MongoInit public class MongoInitExample implements MongoInit { @Override public MongoDatabase initDatabase() { MongoClient client = new MongoClient(\"localhost\", 27017); return client.getDatabase(\"testDB\"); } }","title":"MongoDatabase Init Implementation"},{"location":"mongo/#marking-your-java-beans-for-dao-usage","text":"Next you should annotate your Java beans to be used by the DAO. If you do not supply a key for the field it will default to the Java field name. public class MongoBean { @MongoField(key = \"name\") private String title; @MongoField private String genre; @MongoField(key = \"release-year\") private int year; }","title":"Marking your Java Beans for DAO Usage"},{"location":"mongo/#making-a-dao-class","text":"This is extremely simple as all you need to do is simply annoatate both the MongoInit implementation, as well as the Java Bean that it is using. The DAO's param type will be the Type of the Java Bean @MongoCollection(bean = MongoBean.class, collection = \"testCollection\", mongoInitializer = MongoInitExample.class) public class MongoDaoExample extends MongoDao<MongoBean> { }","title":"Making a DAO Class"},{"location":"mongo/#using-the-dao","text":"Usage of the DAO is straight forward and simple. Instantiate using the deafult constructor and perform CRUD operations. public class MongoExample { public static void main(String[] args) throws ExecutionException { MongoDaoExample dao = new MongoDaoExample(); MongoBean bean1 = new MongoBean(); bean1.setTitle(\"akira\"); bean1.setGenre(\"drama/thriller\"); bean1.setYear(1988); MongoBean bean2 = new MongoBean(); bean2.setTitle(\"serial experiments lain\"); bean2.setGenre(\"sci-fi\"); bean2.setYear(1995); System.out.println(\"create \" + dao.create(bean1)); System.out.println(\"delete \" + dao.delete(new KeyPair(\"name\", bean1.getTitle()))); System.out.println(\"create \" + dao.create(bean1)); System.out.println(\"update \" + dao.update(bean2, new KeyPair(\"name\", bean1.getTitle()))); List<MongoBean> beans = dao.readAll(); for (MongoBean bean : beans) { System.out.println(String.format(\"name: %s, genre: %s, date: %s\", bean.getTitle(), bean.getGenre(), bean.getYear())); } System.out.println(\"delete \" + dao.delete(new KeyPair(\"name\", bean1.getTitle()))); System.out.println(\"delete \" + dao.delete(new KeyPair(\"name\", bean2.getTitle()))); } } =======","title":"Using the DAO"},{"location":"mongo/#mongodb-integration_1","text":"7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"MongoDB Integration"},{"location":"postgres/","text":"<<<<<<< HEAD PostgreSQL Integration SQL Connection Init Implementation The first thing that is needed is to setup the connection to your PostgreSQL server and your application. What you need to do is make a Java class that implements io.brosoft.dao.SqlDbInit public class PostgresqlInit implements SqlDbInit { @Override public Connection initDatabase() { Connection connection; try { String connectionUrl = \"jdbc:postgresql://localhost:5432/test\"; Class.forName(\"org.postgresql.Driver\"); Properties props = new Properties(); props.setProperty(\"user\",\"postgres\"); props.setProperty(\"password\", \"\"); connection = DriverManager.getConnection(connectionUrl,\"postgres\",\"postgres\"); Statement statement = connection.createStatement(); String createTableSql = \"CREATE TABLE IF NOT EXISTS sampleTable (\" + \"name TEXT PRIMARY KEY NOT NULL,\" + \"species TEXT NOT NULL,\" + \"occupation TEXT NOT NULL)\"; statement.execute(createTableSql); statement.close(); } catch (SQLException | ClassNotFoundException e) { throw new RuntimeException(e); } return connection; } } Marking your Java Beans for DAO Usage Next you should annotate your Java beans to be used by the DAO. If you do not supply a key for the field it will default to the Java field name. public class PostgresqlBean { @SQLField public String name; @SQLField public String species; @SQLField public String occupation; } Making a DAO Class This is extremely simple as all you need to do is simply annoatate both the MongoInit implementation, as well as the Java Bean that it is using. The DAO's param type will be the Type of the Java Bean @SQLTable(dbInitializer = PostgresqlInit.class, bean = PostgresqlBean.class, table = \"sampleTable\") public class PostgresqlDaoExample extends SQLDao<PostgresqlBean> { } Using the DAO Usage of the DAO is straight forward and simple. Instantiate using the deafult constructor and perform CRUD operations. public class PostgresqlExample { public static void main(String[] args) throws ExecutionException { SQLDao<PostgresqlBean> dao = new PostgresqlDaoExample(); PostgresqlBean bean1 = new PostgresqlBean(); bean1.name = \"Fox McCloud\"; bean1.species = \"Red Fox\"; bean1.occupation = \"Star Fox Team Leader\"; PostgresqlBean bean2 = new PostgresqlBean(); bean2.name = \"Falco Lombardi\"; bean2.species = \"Avian\"; bean2.occupation = \"Star Fox Team Ace Pilot\"; System.out.println( \"create \" + dao.create(bean1)); System.out.println( \"delete \" + dao.delete(new KeyPair(\"name\", bean1.name))); System.out.println( \"create \" + dao.create(bean1)); System.out.println( \"update \" + dao.update(bean2, new KeyPair(\"name\", bean1.name))); for (PostgresqlBean bean : dao.readAll()) { System.out.printf(\"name: %s, species: %s, occupation: %s\\n\", bean.name, bean.species, bean.occupation); } System.out.println( \"delete \" + dao.delete(new KeyPair(\"name\", bean1.name))); System.out.println( \"delete \" + dao.delete(new KeyPair(\"name\", bean2.name))); } } ======= PostgreSQL Integration 7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"Postgres"},{"location":"postgres/#postgresql-integration","text":"","title":"PostgreSQL Integration"},{"location":"postgres/#sql-connection-init-implementation","text":"The first thing that is needed is to setup the connection to your PostgreSQL server and your application. What you need to do is make a Java class that implements io.brosoft.dao.SqlDbInit public class PostgresqlInit implements SqlDbInit { @Override public Connection initDatabase() { Connection connection; try { String connectionUrl = \"jdbc:postgresql://localhost:5432/test\"; Class.forName(\"org.postgresql.Driver\"); Properties props = new Properties(); props.setProperty(\"user\",\"postgres\"); props.setProperty(\"password\", \"\"); connection = DriverManager.getConnection(connectionUrl,\"postgres\",\"postgres\"); Statement statement = connection.createStatement(); String createTableSql = \"CREATE TABLE IF NOT EXISTS sampleTable (\" + \"name TEXT PRIMARY KEY NOT NULL,\" + \"species TEXT NOT NULL,\" + \"occupation TEXT NOT NULL)\"; statement.execute(createTableSql); statement.close(); } catch (SQLException | ClassNotFoundException e) { throw new RuntimeException(e); } return connection; } }","title":"SQL Connection Init Implementation"},{"location":"postgres/#marking-your-java-beans-for-dao-usage","text":"Next you should annotate your Java beans to be used by the DAO. If you do not supply a key for the field it will default to the Java field name. public class PostgresqlBean { @SQLField public String name; @SQLField public String species; @SQLField public String occupation; }","title":"Marking your Java Beans for DAO Usage"},{"location":"postgres/#making-a-dao-class","text":"This is extremely simple as all you need to do is simply annoatate both the MongoInit implementation, as well as the Java Bean that it is using. The DAO's param type will be the Type of the Java Bean @SQLTable(dbInitializer = PostgresqlInit.class, bean = PostgresqlBean.class, table = \"sampleTable\") public class PostgresqlDaoExample extends SQLDao<PostgresqlBean> { }","title":"Making a DAO Class"},{"location":"postgres/#using-the-dao","text":"Usage of the DAO is straight forward and simple. Instantiate using the deafult constructor and perform CRUD operations. public class PostgresqlExample { public static void main(String[] args) throws ExecutionException { SQLDao<PostgresqlBean> dao = new PostgresqlDaoExample(); PostgresqlBean bean1 = new PostgresqlBean(); bean1.name = \"Fox McCloud\"; bean1.species = \"Red Fox\"; bean1.occupation = \"Star Fox Team Leader\"; PostgresqlBean bean2 = new PostgresqlBean(); bean2.name = \"Falco Lombardi\"; bean2.species = \"Avian\"; bean2.occupation = \"Star Fox Team Ace Pilot\"; System.out.println( \"create \" + dao.create(bean1)); System.out.println( \"delete \" + dao.delete(new KeyPair(\"name\", bean1.name))); System.out.println( \"create \" + dao.create(bean1)); System.out.println( \"update \" + dao.update(bean2, new KeyPair(\"name\", bean1.name))); for (PostgresqlBean bean : dao.readAll()) { System.out.printf(\"name: %s, species: %s, occupation: %s\\n\", bean.name, bean.species, bean.occupation); } System.out.println( \"delete \" + dao.delete(new KeyPair(\"name\", bean1.name))); System.out.println( \"delete \" + dao.delete(new KeyPair(\"name\", bean2.name))); } } =======","title":"Using the DAO"},{"location":"postgres/#postgresql-integration_1","text":"7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"PostgreSQL Integration"},{"location":"sqlite/","text":"<<<<<<< HEAD SQLite Integration SQL Connection Init Implementation The first thing that is needed is to setup the connection to your Sqlite database and your application. What you need to do is make a Java class that implements io.brosoft.dao.SqlDbInit public class SqliteInitExmple implements SqlDbInit { @Override public Connection initDatabase() { Connection c = null; Statement stmt = null; try { Class.forName(\"org.sqlite.JDBC\"); c = DriverManager.getConnection(\"jdbc:sqlite:test.db\"); System.out.println(\"Opened database successfully\"); stmt = c.createStatement(); String sql = \"CREATE TABLE IF NOT EXISTS TESTTABLE \" + \"(first TEXT PRIMARY KEY NOT NULL,\" + \"last TEXT NOT NULL,\" + \"age INT NOT NULL)\"; stmt.executeUpdate(sql); stmt.close(); } catch ( Exception e ) { throw new RuntimeException(e); } return c; } } Marking your Java Beans for DAO Usage Next you should annotate your Java beans to be used by the DAO. If you do not supply a key for the field it will default to the Java field name. public class SqliteBeanExample { @SQLField(name = \"first\") private String firstName; @SQLField(name = \"last\") private String lastName; @SQLField private int age; } Making a DAO Class This is extremely simple as all you need to do is simply annoatate both the MongoInit implementation, as well as the Java Bean that it is using. The DAO's param type will be the Type of the Java Bean @SQLTable(table = \"TESTTABLE\", bean = SqliteBeanExample.class, dbInitializer = SqliteInitExmple.class) public class SqliteDaoExample extends SQLDao<SqliteBeanExample> { } Using the DAO Usage of the DAO is straight forward and simple. Instantiate using the deafult constructor and perform CRUD operations. public class SqliteExample { public static void main(String[] args) throws ExecutionException { SQLDao<SqliteBeanExample> dao = new SqliteDaoExample(); SqliteBeanExample bean1 = new SqliteBeanExample(); bean1.setFirstName(\"john\"); bean1.setLastName(\"snow\"); bean1.setAge(22); SqliteBeanExample bean2 = new SqliteBeanExample(); bean2.setFirstName(\"obi\"); bean2.setLastName(\"wan\"); bean2.setAge(57); System.out.println(dao.create(bean1)); System.out.println(dao.delete(new KeyPair(\"first\", bean1.getFirstName()))); System.out.println(dao.create(bean1)); System.out.println(dao.update(bean2, new KeyPair(\"first\", bean1.getFirstName()))); dao.readAll().forEach((bean) -> { System.out.println(String.format(\"F: %s L: %s A: %s\", bean.getFirstName(), bean.getLastName(), bean.getAge())); }); System.out.println(dao.delete(new KeyPair(\"first\", bean1.getFirstName()))); System.out.println(dao.delete(new KeyPair(\"first\", bean2.getFirstName()))); } } ======= SQLite Integration 7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"Sqlite"},{"location":"sqlite/#sqlite-integration","text":"","title":"SQLite Integration"},{"location":"sqlite/#sql-connection-init-implementation","text":"The first thing that is needed is to setup the connection to your Sqlite database and your application. What you need to do is make a Java class that implements io.brosoft.dao.SqlDbInit public class SqliteInitExmple implements SqlDbInit { @Override public Connection initDatabase() { Connection c = null; Statement stmt = null; try { Class.forName(\"org.sqlite.JDBC\"); c = DriverManager.getConnection(\"jdbc:sqlite:test.db\"); System.out.println(\"Opened database successfully\"); stmt = c.createStatement(); String sql = \"CREATE TABLE IF NOT EXISTS TESTTABLE \" + \"(first TEXT PRIMARY KEY NOT NULL,\" + \"last TEXT NOT NULL,\" + \"age INT NOT NULL)\"; stmt.executeUpdate(sql); stmt.close(); } catch ( Exception e ) { throw new RuntimeException(e); } return c; } }","title":"SQL Connection Init Implementation"},{"location":"sqlite/#marking-your-java-beans-for-dao-usage","text":"Next you should annotate your Java beans to be used by the DAO. If you do not supply a key for the field it will default to the Java field name. public class SqliteBeanExample { @SQLField(name = \"first\") private String firstName; @SQLField(name = \"last\") private String lastName; @SQLField private int age; }","title":"Marking your Java Beans for DAO Usage"},{"location":"sqlite/#making-a-dao-class","text":"This is extremely simple as all you need to do is simply annoatate both the MongoInit implementation, as well as the Java Bean that it is using. The DAO's param type will be the Type of the Java Bean @SQLTable(table = \"TESTTABLE\", bean = SqliteBeanExample.class, dbInitializer = SqliteInitExmple.class) public class SqliteDaoExample extends SQLDao<SqliteBeanExample> { }","title":"Making a DAO Class"},{"location":"sqlite/#using-the-dao","text":"Usage of the DAO is straight forward and simple. Instantiate using the deafult constructor and perform CRUD operations. public class SqliteExample { public static void main(String[] args) throws ExecutionException { SQLDao<SqliteBeanExample> dao = new SqliteDaoExample(); SqliteBeanExample bean1 = new SqliteBeanExample(); bean1.setFirstName(\"john\"); bean1.setLastName(\"snow\"); bean1.setAge(22); SqliteBeanExample bean2 = new SqliteBeanExample(); bean2.setFirstName(\"obi\"); bean2.setLastName(\"wan\"); bean2.setAge(57); System.out.println(dao.create(bean1)); System.out.println(dao.delete(new KeyPair(\"first\", bean1.getFirstName()))); System.out.println(dao.create(bean1)); System.out.println(dao.update(bean2, new KeyPair(\"first\", bean1.getFirstName()))); dao.readAll().forEach((bean) -> { System.out.println(String.format(\"F: %s L: %s A: %s\", bean.getFirstName(), bean.getLastName(), bean.getAge())); }); System.out.println(dao.delete(new KeyPair(\"first\", bean1.getFirstName()))); System.out.println(dao.delete(new KeyPair(\"first\", bean2.getFirstName()))); } } =======","title":"Using the DAO"},{"location":"sqlite/#sqlite-integration_1","text":"7d3dcf7cc11ab570732c1469622f221c2cb3eaf0","title":"SQLite Integration"}]}